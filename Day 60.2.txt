1721. Swapping Nodes in a Linked List

You are given the head of a linked list, and an integer k.

Return the head of the linked list after swapping the values of the kth node from the beginning and the kth node from the end (the list is 1-indexed).

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [1,4,3,2,5]
Example 2:

Input: head = [7,9,6,6,7,8,3,0,9,5], k = 5
Output: [7,9,6,6,8,7,3,0,9,5]
Example 3:

Input: head = [1], k = 1
Output: [1]
Example 4:

Input: head = [1,2], k = 1
Output: [2,1]
Example 5:

Input: head = [1,2,3], k = 2
Output: [1,2,3]
 

Constraints:

The number of nodes in the list is n.
1 <= k <= n <= 105
0 <= Node.val <= 100



class Solution {
    public ListNode swapNodes(ListNode head, int k) {
        if(head==null)
            return null;
        if(head.next==null)
            return head;
        int c=count(head),i;
        ListNode ptr,ptr1=null,ptr2=null;
        if(c==k)
        {
            for(ptr=head.next;ptr.next!=null;ptr=ptr.next);
            i=ptr.val;
            ptr.val=head.val;
            head.val=i;
            return head;
        }
        if((c+1)==(2*k))
            return head;
        c=c-k;
        for(i=1,ptr=head;ptr!=null;ptr=ptr.next,i++)
        {
            if(i==k)
            {
                ptr1=ptr;
            }
            else if(i==c+1)
            {
                ptr2=ptr;
            }
        }
        k=ptr1.val;
        ptr1.val=ptr2.val;
        ptr2.val=k;
        return head;
    }
    static int count(ListNode head)
    {
        int c=0;
        ListNode ptr;
        for(ptr=head;ptr!=null;ptr=ptr.next)
        {
            c++;
        }
        return c;
    }
}