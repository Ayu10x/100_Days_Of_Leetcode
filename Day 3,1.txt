20. Valid Parentheses

Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false
Example 4:

Input: s = "([)]"
Output: false
Example 5:

Input: s = "{[]}"
Output: true
 

Constraints:

1 <= s.length <= 104
s consists of parentheses only '()[]{}'.




class Solution {
    public boolean isValid(String s) {
        Stack<Character> nm=new Stack<>();
        int i;
        char c,c1;
        if(s.length()==1)
            return false;
        for(i=0;i<s.length();i++)
        {
            c=s.charAt(i);
            if(c=='['||c=='{'||c=='(')
            {
                nm.push(c);
            }
            else
            {
                if(!nm.empty())
                {
                    if(c==']')
                {
                    if(nm.peek()=='[')
                    nm.pop();
                    else
                    return false;
                }
                else if(c=='}')
                {
                    if(nm.peek()=='{')
                    nm.pop();
                    else
                    return false;
                }
                else if(c==')')
                {
                    if(nm.peek()=='(')
                    nm.pop();
                    else
                    return false;
                }
                }
                else
                    return false;
            }
        }
        return nm.isEmpty();
    }
}