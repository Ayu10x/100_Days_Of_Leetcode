46. Permutations

Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]
 

Constraints:

1 <= nums.length <= 6
-10 <= nums[i] <= 10
 All the integers of nums are unique.





class Solution {
    static List<List<Integer>> nm=new ArrayList<List<Integer>>();
    static List<Integer> kk=new ArrayList<>();
    public List<List<Integer>> permute(int[] n) {
        nm.clear();
        kk.clear();
        task(n,0,n.length);
        return nm;
    }
    static void task(int a[] , int k , int m)
    {
        if(k>=a.length-1)
        {
            kk.clear();
            for(int i=0;i<m-1;i++)
            {
                kk.add(a[i]);
            }
            if(a.length>0)
                kk.add(a[m-1]);
            nm.add(new ArrayList(kk));
            return;
        }
        for(int i=k;i<m;i++)
        {
            int d=a[i];
            a[i]=a[k];
            a[k]=d;
            task(a,k+1,m);
            d=a[i];
            a[i]=a[k];
            a[k]=d;
        }
    }
}