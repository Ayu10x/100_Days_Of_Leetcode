21. Merge Two Sorted Lists

Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.

 

Example 1:


Input: l1 = [1,2,4], l2 = [1,3,4]
Output: [1,1,2,3,4,4]
Example 2:

Input: l1 = [], l2 = []
Output: []
Example 3:

Input: l1 = [], l2 = [0]
Output: [0]
 

Constraints:

The number of nodes in both lists is in the range [0, 50].
-100 <= Node.val <= 100
Both l1 and l2 are sorted in non-decreasing order.






class Solution {
    public ListNode mergeTwoLists(ListNode h1, ListNode h2) {
        if(h1==null&&h2==null)
        return null;
        else if(h1==null)
        return h2;
        else if(h2==null)
        return h1;
        else
        {
            int a,b,i;
            a=count(h1);
            b=count(h2);
            ListNode ptr,ptr1,fresh,start=null,prev=null;
            ArrayList<Integer> nm=new ArrayList<>();
            for(ptr=h1,ptr1=h2;ptr!=null&&ptr1!=null;ptr=ptr.next,ptr1=ptr1.next)
            {
                nm.add(ptr.val);
                nm.add(ptr1.val);
            }
            if(a>b)
            {
                for(;ptr!=null;ptr=ptr.next)
                {
                    nm.add(ptr.val);
                }
            }
            else if(a<b)
            {
                for(;ptr1!=null;ptr1=ptr1.next)
                {
                    nm.add(ptr1.val);
                }
            }
            Collections.sort(nm);
            for(i=0;i<nm.size();i++)
            {
                fresh=new ListNode(nm.get(i));
                if(start==null)
                {
                    start=fresh;
                }
                else
                {
                    prev.next=fresh;
                }
                prev=fresh;
            }
            return start;
        }
    }
    static int count(ListNode h)
    {
        ListNode ptr;
        int c=0;
        for(ptr=h;ptr!=null;ptr=ptr.next)
        {
            c++;
        }
        return c;
    }
}