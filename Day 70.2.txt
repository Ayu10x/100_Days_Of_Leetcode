136. Single Number

Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.

 

Example 1:

Input: nums = [2,2,1]
Output: 1
Example 2:

Input: nums = [4,1,2,1,2]
Output: 4
Example 3:

Input: nums = [1]
Output: 1
 

Constraints:

1 <= nums.length <= 3 * 104
-3 * 104 <= nums[i] <= 3 * 104
Each element in the array appears twice except for one element which appears only once.





class Solution {
    public int singleNumber(int[] n) {
        if(n.length==1)
            return n[0];
        HashMap<Integer,Integer> nm=new HashMap<Integer,Integer>();
        int i;
        for(i=0;i<n.length;i++)
        {
            if(nm.containsKey(n[i]))
                nm.put(n[i] , nm.get(n[i])+1);
            else
                nm.put(n[i],1);
        }
        for(int k : nm.keySet())
        {
            if(nm.get(k)==1)
                return k;
        }
        return 1;
    }
}