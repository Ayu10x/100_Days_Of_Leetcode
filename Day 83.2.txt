34. Find First and Last Position of Element in Sorted Array

Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]
 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums is a non-decreasing array.
-109 <= target <= 109







class Solution {
    public int[] searchRange(int[] n, int t) {
        int a[]=new int[2];
        a[0]=-1;
        a[1]=-1;
        if(n.length==0)
            return a;
        int i=0,j=n.length-1,m=0,f=0;
        while(i<=j)
        {
            m=i+(j-i)/2;
            if(t==n[m])
            {
                f=1;
                break;
            }
            else if(t<n[m])
                j=m-1;
            else
                i=m+1;
        }
        if(f==1)
        {
            for(int k=m;k>=0;k--)
            {
                if(n[k]==t)
                {
                    a[0]=k;
                }
                else
                    break;
            }
            j=n.length;
            for(int k=m;k<j;k++)
            {
                if(n[k]==t)
                {
                    a[1]=k;
                }
                else
                    break;
            }
        }
        return a;
    }
}