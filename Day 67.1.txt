1051. Height Checker

A school is trying to take an annual photo of all the students. The students are asked to stand in a single file line in non-decreasing order by height. Let this ordering be represented by the integer array expected where expected[i] is the expected height of the ith student in line.

You are given an integer array heights representing the current order that the students are standing in. Each heights[i] is the height of the ith student in line (0-indexed).

Return the number of indices where heights[i] != expected[i].

 

Example 1:

Input: heights = [1,1,4,2,1,3]
Output: 3
Explanation: 
heights:  [1,1,4,2,1,3]
expected: [1,1,1,2,3,4]
Indices 2, 4, and 5 do not match.
Example 2:

Input: heights = [5,1,2,3,4]
Output: 5
Explanation:
heights:  [5,1,2,3,4]
expected: [1,2,3,4,5]
All indices do not match.
Example 3:

Input: heights = [1,2,3,4,5]
Output: 0
Explanation:
heights:  [1,2,3,4,5]
expected: [1,2,3,4,5]
All indices match.
 

Constraints:

1 <= heights.length <= 100
1 <= heights[i] <= 100





class Solution {
    static int a[];
    public int heightChecker(int[] h) {
        a=new int[h.length];
        int i,c=0;
        for(i=0;i<h.length;i++)
        {
            a[i]=h[i];
        }
        task(a,0,a.length-1);
        for(i=0;i<a.length;i++)
        {
            if(a[i]!=h[i])
                c++;
        }
        return c;
    }
    void task(int n[] , int i , int j)
    {
        if(i<j)
        {
            int m=(i+j)/2;
            task(n,i,m);
            task(n,m+1,j);
            task1(n,i,m,j);
        }
    }
    void task1(int n[] , int s , int m , int e)
    {
        int i=s,j=m+1,k=0;
        int b[]=new int[e-s+1];
        while(i<=m&&j<=e)
        {
            if(n[i]<=n[j])
            {
                b[k++]=n[i++];
            }
            else
            {
                b[k++]=n[j++];
            }
        }
        while(i<=m)
        {
            b[k++]=n[i++];
        }
        while(j<=e)
        {
            b[k++]=n[j++];
        }
        for(i=s;i<=e;i++)
        {
            a[i]=b[i-s];
        }
    }
}